{"version":3,"file":"js/954.db5dc6d5.js","mappings":"gLAUO,MAAMA,EAAuBC,MAAOC,EAAMC,KAC/C,IAEE,MAAMC,EAAWC,mCAIXC,EAAeD,mCAErB,IAAKD,IAAaE,EAChB,MAAM,IAAIC,MAAM,sCAGlBC,QAAQC,IAAI,mBAAoBL,EAASM,UAAU,EAAG,GAAK,OAG3D,MAAMC,EAAaC,KAAK,GAAGR,KAAYE,KAGjCO,QAAiBC,MAAM,yCAA0C,CACrEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oCAChB,cAAiB,SAASL,KAE5BM,KAAM,IAAIC,gBAAgB,CACxBC,WAAY,qBACZjB,KAAMA,EACNkB,aAAcjB,MAKZkB,QAAqBR,EAASS,OAGpC,IAAKT,EAASU,GACZ,MAAM,IAAIhB,MAAMc,EAAaG,mBAAqBH,EAAaI,OAAS,iBAG1E,MAAO,CACLC,aAAcL,EAAaK,aAC3BC,cAAeN,EAAaM,cAC5BC,WAAYP,EAAaO,WAE7B,CAAE,MAAOH,GAEP,MADAjB,QAAQiB,MAAM,yBAA0BA,GAClCA,CACR,E","sources":["webpack://now-playing/./src/services/authProxy.js"],"sourcesContent":["/**\r\n * Authentication proxy service for Spotify API token exchange\r\n */\r\n\r\n/**\r\n * Exchanges the authorization code for access and refresh tokens\r\n * @param {string} code - The authorization code returned by Spotify\r\n * @param {string} redirectUri - The redirect URI registered with Spotify\r\n * @returns {Promise<Object>} - Promise containing access_token and refresh_token\r\n */\r\nexport const exchangeCodeForToken = async (code, redirectUri) => {\r\n  try {\r\n    // Get client ID from environment variables or config\r\n    const clientId = process.env.VUE_APP_SPOTIFY_CLIENT_ID || \r\n                    (window.spotifyConfig && window.spotifyConfig.clientId);\r\n    \r\n    // Get client secret from environment variables\r\n    const clientSecret = process.env.VUE_APP_SPOTIFY_CLIENT_SECRET;\r\n    \r\n    if (!clientId || !clientSecret) {\r\n      throw new Error(\"Missing Spotify client credentials\");\r\n    }\r\n    \r\n    console.log(\"Using client ID:\", clientId.substring(0, 5) + \"...\");\r\n    \r\n    // Create authorization string for Spotify API\r\n    const authString = btoa(`${clientId}:${clientSecret}`);\r\n    \r\n    // Make request to Spotify token endpoint\r\n    const response = await fetch(\"https://accounts.spotify.com/api/token\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        \"Authorization\": `Basic ${authString}`\r\n      },\r\n      body: new URLSearchParams({\r\n        grant_type: \"authorization_code\",\r\n        code: code,\r\n        redirect_uri: redirectUri\r\n      })\r\n    });\r\n    \r\n    // Parse response\r\n    const responseData = await response.json();\r\n    \r\n    // Check for errors\r\n    if (!response.ok) {\r\n      throw new Error(responseData.error_description || responseData.error || \"Unknown error\");\r\n    }\r\n    \r\n    return {\r\n      access_token: responseData.access_token,\r\n      refresh_token: responseData.refresh_token,\r\n      expires_in: responseData.expires_in\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Token exchange failed:\", error);\r\n    throw error;\r\n  }\r\n};"],"names":["exchangeCodeForToken","async","code","redirectUri","clientId","process","clientSecret","Error","console","log","substring","authString","btoa","response","fetch","method","headers","body","URLSearchParams","grant_type","redirect_uri","responseData","json","ok","error_description","error","access_token","refresh_token","expires_in"],"sourceRoot":""}