{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport MusicPlayer from './MusicPlayer.vue';\nexport default {\n  name: 'NowPlaying',\n  components: {\n    MusicPlayer\n  },\n  data() {\n    return {\n      progressMs: 0,\n      progressInterval: null,\n      pollingInterval: null,\n      lastUpdateTime: Date.now(),\n      lastServerProgressMs: 0,\n      lastServerTimestamp: Date.now(),\n      pollingFrequency: 1000\n    };\n  },\n  computed: {\n    currentTrack() {\n      return this.$store.state.currentTrack;\n    },\n    isPlaying() {\n      return this.$store.state.isPlaying;\n    },\n    artistNames() {\n      if (!this.currentTrack) return '';\n      return this.currentTrack.artists.map(artist => artist.name).join(', ');\n    },\n    progressPercentage() {\n      if (!this.currentTrack) return 0;\n      return this.progressMs / this.currentTrack.duration_ms * 100;\n    }\n  },\n  methods: {\n    formatTime(ms) {\n      const seconds = Math.floor(ms / 1000 % 60);\n      const minutes = Math.floor(ms / (1000 * 60) % 60);\n      return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n    },\n    refreshTrack() {\n      this.$store.dispatch('fetchCurrentTrack');\n    },\n    async updateProgress() {\n      if (!this.currentTrack || !this.isPlaying) return;\n      try {\n        const response = await fetch('https://api.spotify.com/v1/me/player/currently-playing', {\n          headers: {\n            'Authorization': `Bearer ${this.$store.state.token}`\n          }\n        });\n        if (response.status === 204) {\n          // No track playing anymore\n          this.refreshTrack();\n          return;\n        }\n        if (!response.ok) {\n          throw new Error('Failed to fetch progress');\n        }\n        const data = await response.json();\n\n        // Only update if it's still the same track\n        if (data.item && data.item.id === this.currentTrack.id) {\n          // Store the server-reported timestamp for drift calculation\n          this.lastServerProgressMs = data.progress_ms;\n          this.lastServerTimestamp = Date.now();\n\n          // Update the progress more smoothly\n          this.progressMs = data.progress_ms;\n        } else if (data.item && data.item.id !== this.currentTrack.id) {\n          // Track changed\n          this.refreshTrack();\n        }\n      } catch (error) {\n        console.error('Error updating progress:', error);\n      }\n    },\n    startProgressTimer() {\n      if (this.progressInterval) {\n        clearInterval(this.progressInterval);\n      }\n      this.lastUpdateTime = Date.now();\n\n      // Local progress update every 100ms for smoother UI\n      this.progressInterval = setInterval(() => {\n        if (this.isPlaying && this.progressMs < this.currentTrack.duration_ms) {\n          const now = Date.now();\n          const elapsed = now - this.lastUpdateTime;\n          this.lastUpdateTime = now;\n\n          // Only increment if playing and not at the end\n          this.progressMs += elapsed;\n        } else if (this.progressMs >= this.currentTrack.duration_ms) {\n          this.refreshTrack();\n        }\n      }, 100); // Update more frequently for smoother visuals\n\n      // Poll Spotify API for occasional correction\n      if (this.pollingInterval) {\n        clearInterval(this.pollingInterval);\n      }\n      this.pollingInterval = setInterval(() => {\n        this.updateProgress();\n      }, 10000); // Less frequent polling to reduce jumps\n    }\n  },\n  created() {\n    this.refreshTrack();\n\n    // Poll for track updates every 5 seconds\n    this.trackInterval = setInterval(() => {\n      this.refreshTrack();\n    }, 5000);\n  },\n  watch: {\n    currentTrack(newTrack) {\n      if (newTrack) {\n        // Start progress timer\n        this.progressMs = this.$store.state.progressMs || 0;\n        this.startProgressTimer();\n      }\n    },\n    isPlaying(playing) {\n      if (playing) {\n        this.startProgressTimer();\n      } else if (this.progressInterval) {\n        clearInterval(this.progressInterval);\n      }\n    }\n  },\n  beforeUnmount() {\n    if (this.progressInterval) {\n      clearInterval(this.progressInterval);\n    }\n    if (this.trackInterval) {\n      clearInterval(this.trackInterval);\n    }\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n    }\n  }\n};","map":{"version":3,"names":["MusicPlayer","name","components","data","progressMs","progressInterval","pollingInterval","lastUpdateTime","Date","now","lastServerProgressMs","lastServerTimestamp","pollingFrequency","computed","currentTrack","$store","state","isPlaying","artistNames","artists","map","artist","join","progressPercentage","duration_ms","methods","formatTime","ms","seconds","Math","floor","minutes","refreshTrack","dispatch","updateProgress","response","fetch","headers","token","status","ok","Error","json","item","id","progress_ms","error","console","startProgressTimer","clearInterval","setInterval","elapsed","created","trackInterval","watch","newTrack","playing","beforeUnmount"],"sources":["C:\\Users\\menof\\OneDrive\\Desktop\\Now Playing\\now-playing\\src\\components\\NowPlaying.vue"],"sourcesContent":["// src/components/NowPlaying.vue\r\n<template>\r\n  <div class=\"now-playing-container\">\r\n    <div v-if=\"!currentTrack\" class=\"no-track\">\r\n      <p>No track currently playing</p>\r\n      <button @click=\"refreshTrack\" class=\"refresh-button\">Refresh</button>\r\n    </div>\r\n    \r\n    <div v-else class=\"track-card\">\r\n      <!-- Album Cover (Now Larger) -->\r\n      <div class=\"album-cover-container\">\r\n        <img :src=\"currentTrack.album.images[0].url\" alt=\"Album Cover\" class=\"album-cover\" />\r\n      </div>\r\n      \r\n      <!-- Track Info -->\r\n      <div class=\"track-info\">\r\n        <h2>{{ currentTrack.name }}</h2>\r\n        <p class=\"artist\">{{ artistNames }}</p>\r\n        <p class=\"album\">{{ currentTrack.album.name }}</p>\r\n      </div>\r\n      \r\n      <!-- Progress Bar -->\r\n      <div class=\"progress-container\">\r\n        <div class=\"progress-bar\">\r\n          <div class=\"progress\" :style=\"{ width: progressPercentage + '%' }\"></div>\r\n        </div>\r\n        <div class=\"time-info\">\r\n          <span>{{ formatTime(progressMs) }}</span>\r\n          <span>{{ formatTime(currentTrack.duration_ms) }}</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Music Player Controls -->\r\n      <MusicPlayer />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MusicPlayer from './MusicPlayer.vue'\r\n\r\nexport default {\r\n  name: 'NowPlaying',\r\n  components: {\r\n    MusicPlayer\r\n  },\r\n  data() {\r\n    return {\r\n      progressMs: 0,\r\n      progressInterval: null,\r\n      pollingInterval: null,\r\n      lastUpdateTime: Date.now(),\r\n      lastServerProgressMs: 0,\r\n      lastServerTimestamp: Date.now(),\r\n      pollingFrequency: 1000\r\n    }\r\n  },\r\n  computed: {\r\n    currentTrack() {\r\n      return this.$store.state.currentTrack\r\n    },\r\n    isPlaying() {\r\n      return this.$store.state.isPlaying\r\n    },\r\n    artistNames() {\r\n      if (!this.currentTrack) return ''\r\n      return this.currentTrack.artists.map(artist => artist.name).join(', ')\r\n    },\r\n    progressPercentage() {\r\n      if (!this.currentTrack) return 0\r\n      return (this.progressMs / this.currentTrack.duration_ms) * 100\r\n    }\r\n  },\r\n  methods: {\r\n    formatTime(ms) {\r\n      const seconds = Math.floor((ms / 1000) % 60)\r\n      const minutes = Math.floor((ms / (1000 * 60)) % 60)\r\n      \r\n      return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`\r\n    },\r\n    refreshTrack() {\r\n      this.$store.dispatch('fetchCurrentTrack')\r\n    },\r\n    async updateProgress() {\r\n      if (!this.currentTrack || !this.isPlaying) return\r\n      \r\n      try {\r\n        const response = await fetch('https://api.spotify.com/v1/me/player/currently-playing', {\r\n          headers: {\r\n            'Authorization': `Bearer ${this.$store.state.token}`\r\n          }\r\n        })\r\n        \r\n        if (response.status === 204) {\r\n          // No track playing anymore\r\n          this.refreshTrack()\r\n          return\r\n        }\r\n        \r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch progress')\r\n        }\r\n        \r\n        const data = await response.json()\r\n        \r\n        // Only update if it's still the same track\r\n        if (data.item && data.item.id === this.currentTrack.id) {\r\n          // Store the server-reported timestamp for drift calculation\r\n          this.lastServerProgressMs = data.progress_ms\r\n          this.lastServerTimestamp = Date.now()\r\n          \r\n          // Update the progress more smoothly\r\n          this.progressMs = data.progress_ms\r\n        } else if (data.item && data.item.id !== this.currentTrack.id) {\r\n          // Track changed\r\n          this.refreshTrack()\r\n        }\r\n      } catch (error) {\r\n        console.error('Error updating progress:', error)\r\n      }\r\n    },\r\n    startProgressTimer() {\r\n      if (this.progressInterval) {\r\n        clearInterval(this.progressInterval)\r\n      }\r\n      \r\n      this.lastUpdateTime = Date.now()\r\n      \r\n      // Local progress update every 100ms for smoother UI\r\n      this.progressInterval = setInterval(() => {\r\n        if (this.isPlaying && this.progressMs < this.currentTrack.duration_ms) {\r\n          const now = Date.now()\r\n          const elapsed = now - this.lastUpdateTime\r\n          this.lastUpdateTime = now\r\n          \r\n          // Only increment if playing and not at the end\r\n          this.progressMs += elapsed\r\n        } else if (this.progressMs >= this.currentTrack.duration_ms) {\r\n          this.refreshTrack()\r\n        }\r\n      }, 100) // Update more frequently for smoother visuals\r\n      \r\n      // Poll Spotify API for occasional correction\r\n      if (this.pollingInterval) {\r\n        clearInterval(this.pollingInterval)\r\n      }\r\n      \r\n      this.pollingInterval = setInterval(() => {\r\n        this.updateProgress()\r\n      }, 10000) // Less frequent polling to reduce jumps\r\n    }\r\n  },\r\n  created() {\r\n    this.refreshTrack()\r\n    \r\n    // Poll for track updates every 5 seconds\r\n    this.trackInterval = setInterval(() => {\r\n      this.refreshTrack()\r\n    }, 5000)\r\n  },\r\n  watch: {\r\n    currentTrack(newTrack) {\r\n      if (newTrack) {\r\n        // Start progress timer\r\n        this.progressMs = this.$store.state.progressMs || 0;\r\n        this.startProgressTimer()\r\n      }\r\n    },\r\n    isPlaying(playing) {\r\n      if (playing) {\r\n        this.startProgressTimer()\r\n      } else if (this.progressInterval) {\r\n        clearInterval(this.progressInterval)\r\n      }\r\n    }\r\n  },\r\nbeforeUnmount() {\r\n  if (this.progressInterval) {\r\n    clearInterval(this.progressInterval)\r\n  }\r\n  \r\n  if (this.trackInterval) {\r\n    clearInterval(this.trackInterval)\r\n  }\r\n  \r\n  if (this.pollingInterval) {\r\n    clearInterval(this.pollingInterval)\r\n  }\r\n}\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.now-playing-container {\r\n  max-width: 100%;\r\n  margin: 0 auto;\r\n  padding: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n}\r\n\r\n.no-track {\r\n  text-align: center;\r\n  background-color: #24356f;\r\n  padding: 2rem;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);\r\n  margin-top: 2rem;\r\n  width: 90%;\r\n  max-width: 500px;\r\n}\r\n\r\n.refresh-button {\r\n  background-color: #1DB954;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 30px;\r\n  margin-top: 1rem;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.refresh-button:hover {\r\n  background-color: #1ed760;\r\n  transform: scale(1.05);\r\n}\r\n\r\n.track-card {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.album-cover-container {\r\n  width: 100%;\r\n  padding: 1rem;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.album-cover {\r\n  width: 100%;\r\n  max-width: 600px;\r\n  height: auto;\r\n  border-radius: 12px;\r\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);\r\n  object-fit: cover;\r\n}\r\n\r\n.track-info {\r\n  padding: 1.5rem;\r\n  text-align: center;\r\n  margin-top: 1rem;\r\n}\r\n\r\nh2 {\r\n  margin: 0;\r\n  font-size: 2rem;\r\n  color: white;\r\n  font-weight: 700;\r\n  letter-spacing: -0.02em;\r\n}\r\n\r\n.artist {\r\n  color: #e6e6e6;\r\n  margin: 0.5rem 0;\r\n  font-size: 1.2rem;\r\n  font-weight: 500;\r\n}\r\n\r\n.album {\r\n  color: #b3b3b3;\r\n  margin-bottom: 0.5rem;\r\n  font-weight: 400;\r\n}\r\n\r\n.progress-container {\r\n  margin: 1rem 2rem;\r\n}\r\n\r\n.progress-bar {\r\n  height: 6px;\r\n  background-color: #414141;\r\n  border-radius: 3px;\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n}\r\n\r\n.progress {\r\n  height: 100%;\r\n  background-color: #ff0000;\r\n  transition: width 0.1s linear;\r\n}\r\n\r\n.time-info {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  font-size: 0.8rem;\r\n  color: #b3b3b3;\r\n  margin-top: 0.5rem;\r\n  padding: 0 0.5rem;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}