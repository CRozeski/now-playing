{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport MusicPlayer from './MusicPlayer.vue';\nexport default {\n  name: 'NowPlaying',\n  components: {\n    MusicPlayer\n  },\n  data() {\n    return {\n      progressMs: 0,\n      progressInterval: null,\n      pollingInterval: null,\n      pollingFrequency: 1000 // Poll every second for accurate progress\n    };\n  },\n  computed: {\n    currentTrack() {\n      return this.$store.state.currentTrack;\n    },\n    isPlaying() {\n      return this.$store.state.isPlaying;\n    },\n    artistNames() {\n      if (!this.currentTrack) return '';\n      return this.currentTrack.artists.map(artist => artist.name).join(', ');\n    },\n    progressPercentage() {\n      if (!this.currentTrack) return 0;\n      return this.progressMs / this.currentTrack.duration_ms * 100;\n    }\n  },\n  methods: {\n    formatTime(ms) {\n      const seconds = Math.floor(ms / 1000 % 60);\n      const minutes = Math.floor(ms / (1000 * 60) % 60);\n      return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n    },\n    async refreshTrack() {\n      await this.$store.dispatch('fetchCurrentPlayback');\n    },\n    startProgressTimer() {\n      // Clear any existing intervals\n      this.clearIntervals();\n\n      // Only start polling if we have a track and it's playing\n      if (this.currentTrack && this.isPlaying) {\n        // Start polling for playback state\n        this.pollingInterval = setInterval(async () => {\n          await this.refreshTrack();\n        }, this.pollingFrequency);\n\n        // Use local timer for smoother UI updates between API calls\n        this.progressInterval = setInterval(() => {\n          if (this.isPlaying && this.progressMs < this.currentTrack.duration_ms) {\n            this.progressMs += 100; // Update every 100ms for smooth animation\n          }\n        }, 100);\n      }\n    },\n    clearIntervals() {\n      if (this.progressInterval) {\n        clearInterval(this.progressInterval);\n        this.progressInterval = null;\n      }\n      if (this.pollingInterval) {\n        clearInterval(this.pollingInterval);\n        this.pollingInterval = null;\n      }\n    }\n  },\n  async created() {\n    // Initial fetch\n    await this.refreshTrack();\n\n    // Start progress timer\n    this.startProgressTimer();\n  },\n  watch: {\n    currentTrack(newTrack, oldTrack) {\n      if (newTrack) {\n        // If it's a different track or first load\n        if (!oldTrack || newTrack.id !== oldTrack.id) {\n          this.progressMs = this.$store.state.progressMs || 0;\n          this.startProgressTimer();\n        }\n      } else {\n        this.clearIntervals();\n      }\n    },\n    isPlaying(playing) {\n      if (playing) {\n        this.startProgressTimer();\n      } else {\n        this.clearIntervals();\n      }\n    }\n  },\n  beforeUnmount() {\n    this.clearIntervals();\n  }\n};","map":{"version":3,"names":["MusicPlayer","name","components","data","progressMs","progressInterval","pollingInterval","pollingFrequency","computed","currentTrack","$store","state","isPlaying","artistNames","artists","map","artist","join","progressPercentage","duration_ms","methods","formatTime","ms","seconds","Math","floor","minutes","refreshTrack","dispatch","startProgressTimer","clearIntervals","setInterval","clearInterval","created","watch","newTrack","oldTrack","id","playing","beforeUnmount"],"sources":["C:\\Users\\menof\\OneDrive\\Desktop\\Now Playing\\now-playing\\src\\components\\NowPlaying.vue"],"sourcesContent":["// src/components/NowPlaying.vue - Updated version\r\n<template>\r\n  <div class=\"now-playing-container\">\r\n    <div v-if=\"!currentTrack\" class=\"no-track\">\r\n      <p>No track currently playing</p>\r\n      <button @click=\"refreshTrack\" class=\"refresh-button\">Refresh</button>\r\n    </div>\r\n    \r\n    <div v-else class=\"track-card\">\r\n      <img :src=\"currentTrack.album.images[0].url\" alt=\"Album Cover\" class=\"album-cover\" />\r\n      \r\n      <div class=\"track-info\">\r\n        <h2>{{ currentTrack.name }}</h2>\r\n        <p class=\"artist\">{{ artistNames }}</p>\r\n        <p class=\"album\">{{ currentTrack.album.name }}</p>\r\n        \r\n        <div class=\"progress-container\">\r\n          <div class=\"progress-bar\">\r\n            <div class=\"progress\" :style=\"{ width: progressPercentage + '%' }\"></div>\r\n          </div>\r\n          <div class=\"time-info\">\r\n            <span>{{ formatTime(progressMs) }}</span>\r\n            <span>{{ formatTime(currentTrack.duration_ms) }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <MusicPlayer />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MusicPlayer from './MusicPlayer.vue'\r\n\r\nexport default {\r\n  name: 'NowPlaying',\r\n  components: {\r\n    MusicPlayer\r\n  },\r\n  data() {\r\n    return {\r\n      progressMs: 0,\r\n      progressInterval: null,\r\n      pollingInterval: null,\r\n      pollingFrequency: 1000 // Poll every second for accurate progress\r\n    }\r\n  },\r\n  computed: {\r\n    currentTrack() {\r\n      return this.$store.state.currentTrack\r\n    },\r\n    isPlaying() {\r\n      return this.$store.state.isPlaying\r\n    },\r\n    artistNames() {\r\n      if (!this.currentTrack) return ''\r\n      return this.currentTrack.artists.map(artist => artist.name).join(', ')\r\n    },\r\n    progressPercentage() {\r\n      if (!this.currentTrack) return 0\r\n      return (this.progressMs / this.currentTrack.duration_ms) * 100\r\n    }\r\n  },\r\n  methods: {\r\n    formatTime(ms) {\r\n      const seconds = Math.floor((ms / 1000) % 60)\r\n      const minutes = Math.floor((ms / (1000 * 60)) % 60)\r\n      \r\n      return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`\r\n    },\r\n    async refreshTrack() {\r\n      await this.$store.dispatch('fetchCurrentPlayback')\r\n    },\r\n    startProgressTimer() {\r\n      // Clear any existing intervals\r\n      this.clearIntervals()\r\n      \r\n      // Only start polling if we have a track and it's playing\r\n      if (this.currentTrack && this.isPlaying) {\r\n        // Start polling for playback state\r\n        this.pollingInterval = setInterval(async () => {\r\n          await this.refreshTrack()\r\n        }, this.pollingFrequency)\r\n        \r\n        // Use local timer for smoother UI updates between API calls\r\n        this.progressInterval = setInterval(() => {\r\n          if (this.isPlaying && this.progressMs < this.currentTrack.duration_ms) {\r\n            this.progressMs += 100 // Update every 100ms for smooth animation\r\n          }\r\n        }, 100)\r\n      }\r\n    },\r\n    clearIntervals() {\r\n      if (this.progressInterval) {\r\n        clearInterval(this.progressInterval)\r\n        this.progressInterval = null\r\n      }\r\n      \r\n      if (this.pollingInterval) {\r\n        clearInterval(this.pollingInterval)\r\n        this.pollingInterval = null\r\n      }\r\n    }\r\n  },\r\n  async created() {\r\n    // Initial fetch\r\n    await this.refreshTrack()\r\n    \r\n    // Start progress timer\r\n    this.startProgressTimer()\r\n  },\r\n  watch: {\r\n    currentTrack(newTrack, oldTrack) {\r\n      if (newTrack) {\r\n        // If it's a different track or first load\r\n        if (!oldTrack || newTrack.id !== oldTrack.id) {\r\n          this.progressMs = this.$store.state.progressMs || 0\r\n          this.startProgressTimer()\r\n        }\r\n      } else {\r\n        this.clearIntervals()\r\n      }\r\n    },\r\n    isPlaying(playing) {\r\n      if (playing) {\r\n        this.startProgressTimer()\r\n      } else {\r\n        this.clearIntervals()\r\n      }\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    this.clearIntervals()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* Your existing styles remain unchanged */\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}