{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"now-playing-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"no-track\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"track-card\"\n};\nconst _hoisted_4 = {\n  class: \"album-cover-container\"\n};\nconst _hoisted_5 = [\"src\"];\nconst _hoisted_6 = {\n  class: \"track-info\"\n};\nconst _hoisted_7 = {\n  class: \"artist\"\n};\nconst _hoisted_8 = {\n  class: \"album\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_MusicPlayer = _resolveComponent(\"MusicPlayer\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [!$options.currentTrack ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_cache[1] || (_cache[1] = _createElementVNode(\"p\", null, \"No track currently playing\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.refreshTrack && $options.refreshTrack(...args)),\n    class: \"refresh-button\"\n  }, \"Refresh\")])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createCommentVNode(\" Album Cover (Now Larger) \"), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"img\", {\n    src: $options.currentTrack.album.images[0].url,\n    alt: \"Album Cover\",\n    class: \"album-cover\"\n  }, null, 8 /* PROPS */, _hoisted_5)]), _createCommentVNode(\" Track Info \"), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"h2\", null, _toDisplayString($options.currentTrack.name), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_7, _toDisplayString($options.artistNames), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_8, _toDisplayString($options.currentTrack.album.name), 1 /* TEXT */)]), _createCommentVNode(\" Progress Bar \\r\\n      <div class=\\\"progress-container\\\">\\r\\n        <div class=\\\"progress-bar\\\">\\r\\n          <div class=\\\"progress\\\" :style=\\\"{ width: progressPercentage + '%' }\\\"></div>\\r\\n        </div>\\r\\n        <div class=\\\"time-info\\\">\\r\\n          <span>{{ formatTime(progressMs) }}</span>\\r\\n          <span>{{ formatTime(currentTrack.duration_ms) }}</span>\\r\\n        </div>\\r\\n      </div>\\r\\n    \"), _createCommentVNode(\" Music Player Controls \"), _createVNode(_component_MusicPlayer)]))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","$options","currentTrack","_hoisted_2","_createElementVNode","onClick","_cache","args","refreshTrack","_hoisted_3","_createCommentVNode","_hoisted_4","src","album","images","url","alt","_hoisted_5","_hoisted_6","_toDisplayString","name","_hoisted_7","artistNames","_hoisted_8","_createVNode","_component_MusicPlayer"],"sources":["C:\\Users\\menof\\OneDrive\\Desktop\\Now Playing\\now-playing\\src\\components\\NowPlaying.vue"],"sourcesContent":["// src/components/NowPlaying.vue\r\n<template>\r\n  <div class=\"now-playing-container\">\r\n    <div v-if=\"!currentTrack\" class=\"no-track\">\r\n      <p>No track currently playing</p>\r\n      <button @click=\"refreshTrack\" class=\"refresh-button\">Refresh</button>\r\n    </div>\r\n    \r\n    <div v-else class=\"track-card\">\r\n      <!-- Album Cover (Now Larger) -->\r\n      <div class=\"album-cover-container\">\r\n        <img :src=\"currentTrack.album.images[0].url\" alt=\"Album Cover\" class=\"album-cover\" />\r\n      </div>\r\n      \r\n      <!-- Track Info -->\r\n      <div class=\"track-info\">\r\n        <h2>{{ currentTrack.name }}</h2>\r\n        <p class=\"artist\">{{ artistNames }}</p>\r\n        <p class=\"album\">{{ currentTrack.album.name }}</p>\r\n      </div>\r\n      \r\n      <!-- Progress Bar \r\n      <div class=\"progress-container\">\r\n        <div class=\"progress-bar\">\r\n          <div class=\"progress\" :style=\"{ width: progressPercentage + '%' }\"></div>\r\n        </div>\r\n        <div class=\"time-info\">\r\n          <span>{{ formatTime(progressMs) }}</span>\r\n          <span>{{ formatTime(currentTrack.duration_ms) }}</span>\r\n        </div>\r\n      </div>\r\n    -->\r\n      <!-- Music Player Controls -->\r\n      <MusicPlayer />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MusicPlayer from './MusicPlayer.vue'\r\n\r\nexport default {\r\n  name: 'NowPlaying',\r\n  components: {\r\n    MusicPlayer\r\n  },\r\n  data() {\r\n    return {\r\n      progressMs: 0,\r\n      progressInterval: null,\r\n      pollingInterval: null,\r\n      pollingFrequency: 1000\r\n    }\r\n  },\r\n  computed: {\r\n    currentTrack() {\r\n      return this.$store.state.currentTrack\r\n    },\r\n    isPlaying() {\r\n      return this.$store.state.isPlaying\r\n    },\r\n    artistNames() {\r\n      if (!this.currentTrack) return ''\r\n      return this.currentTrack.artists.map(artist => artist.name).join(', ')\r\n    },\r\n    progressPercentage() {\r\n      if (!this.currentTrack) return 0\r\n      return (this.progressMs / this.currentTrack.duration_ms) * 100\r\n    }\r\n  },\r\n  methods: {\r\n    formatTime(ms) {\r\n      const seconds = Math.floor((ms / 1000) % 60)\r\n      const minutes = Math.floor((ms / (1000 * 60)) % 60)\r\n      \r\n      return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`\r\n    },\r\n    refreshTrack() {\r\n      this.$store.dispatch('fetchCurrentTrack')\r\n    },\r\n    startProgressTimer() {\r\n      if (this.progressInterval) {\r\n        clearInterval(this.progressInterval)\r\n      }\r\n      \r\n      this.progressInterval = setInterval(() => {\r\n        if (this.isPlaying && this.progressMs < this.currentTrack.duration_ms) {\r\n          this.progressMs += 1000\r\n        } else if (this.progressMs >= this.currentTrack.duration_ms) {\r\n          this.refreshTrack()\r\n        }\r\n      }, 1000)\r\n    }\r\n  },\r\n  created() {\r\n    this.refreshTrack()\r\n    \r\n    // Poll for track updates every .5 seconds\r\n    this.trackInterval = setInterval(() => {\r\n      this.refreshTrack()\r\n    }, 500)\r\n  },\r\n  watch: {\r\n    currentTrack(newTrack) {\r\n      if (newTrack) {\r\n        // Start progress timer\r\n        this.progressMs = this.$store.state.progressMs || 0;\r\n        this.startProgressTimer()\r\n      }\r\n    },\r\n    isPlaying(playing) {\r\n      if (playing) {\r\n        this.startProgressTimer()\r\n      } else if (this.progressInterval) {\r\n        clearInterval(this.progressInterval)\r\n      }\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    if (this.progressInterval) {\r\n      clearInterval(this.progressInterval)\r\n    }\r\n    \r\n    if (this.trackInterval) {\r\n      clearInterval(this.trackInterval)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.now-playing-container {\r\n  max-width: 100%;\r\n  margin: 0 auto;\r\n  padding: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n}\r\n\r\n.no-track {\r\n  text-align: center;\r\n  background-color: #24356f;\r\n  padding: 2rem;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);\r\n  margin-top: 2rem;\r\n  width: 90%;\r\n  max-width: 500px;\r\n}\r\n\r\n.refresh-button {\r\n  background-color: #1DB954;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 30px;\r\n  margin-top: 1rem;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.refresh-button:hover {\r\n  background-color: #1ed760;\r\n  transform: scale(1.05);\r\n}\r\n\r\n.track-card {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.album-cover-container {\r\n  width: 100%;\r\n  padding: 1rem;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.album-cover {\r\n  width: 100%;\r\n  max-width: 600px;\r\n  height: auto;\r\n  border-radius: 12px;\r\n  box-shadow: 8px 8px 12px rgba(62, 62, 62, 0.5);\r\n  object-fit: cover;\r\n}\r\n\r\n.track-info {\r\n  padding: 1.5rem;\r\n  text-align: center;\r\n  margin-top: 1rem;\r\n}\r\n\r\nh2 {\r\n  margin: 0;\r\n  font-size: 2rem;\r\n  color: white;\r\n  font-weight: 700;\r\n  letter-spacing: -0.02em;\r\n}\r\n\r\n.artist {\r\n  color: #b02e0c;\r\n  margin: 0.5rem 0;\r\n  font-size: 1.2rem;\r\n  font-weight: 500;\r\n}\r\n\r\n.album {\r\n  color: #aeaeae;\r\n  margin-bottom: 0.5rem;\r\n  font-weight: 400;\r\n}\r\n\r\n.progress-container {\r\n  margin: 1rem 2rem;\r\n}\r\n\r\n.progress-bar {\r\n  height: 6px;\r\n  background-color: #414141;\r\n  border-radius: 3px;\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n}\r\n\r\n.progress {\r\n  height: 100%;\r\n  background-color: #ff0000;\r\n  transition: width 0.1s linear;\r\n}\r\n\r\n.time-info {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  font-size: 0.8rem;\r\n  color: #b3b3b3;\r\n  margin-top: 0.5rem;\r\n  padding: 0 0.5rem;\r\n}\r\n</style>"],"mappings":";;EAEOA,KAAK,EAAC;AAAuB;;EAFpCC,GAAA;EAG8BD,KAAK,EAAC;;;EAHpCC,GAAA;EAQgBD,KAAK,EAAC;;;EAEXA,KAAK,EAAC;AAAuB;mBAVxC;;EAeWA,KAAK,EAAC;AAAY;;EAElBA,KAAK,EAAC;AAAQ;;EACdA,KAAK,EAAC;AAAO;;;uBAhBtBE,mBAAA,CAiCM,OAjCNC,UAiCM,G,CAhCQC,QAAA,CAAAC,YAAY,I,cAAxBH,mBAAA,CAGM,OAHNI,UAGM,G,0BAFJC,mBAAA,CAAiC,WAA9B,4BAA0B,sBAC7BA,mBAAA,CAAqE;IAA5DC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEN,QAAA,CAAAO,YAAA,IAAAP,QAAA,CAAAO,YAAA,IAAAD,IAAA,CAAY;IAAEV,KAAK,EAAC;KAAiB,SAAO,E,oBAG9DE,mBAAA,CA0BM,OA1BNU,UA0BM,GAzBJC,mBAAA,8BAAiC,EACjCN,mBAAA,CAEM,OAFNO,UAEM,GADJP,mBAAA,CAAqF;IAA/EQ,GAAG,EAAEX,QAAA,CAAAC,YAAY,CAACW,KAAK,CAACC,MAAM,IAAIC,GAAG;IAAEC,GAAG,EAAC,aAAa;IAACnB,KAAK,EAAC;0BAX7EoB,UAAA,E,GAcMP,mBAAA,gBAAmB,EACnBN,mBAAA,CAIM,OAJNc,UAIM,GAHJd,mBAAA,CAAgC,YAAAe,gBAAA,CAAzBlB,QAAA,CAAAC,YAAY,CAACkB,IAAI,kBACxBhB,mBAAA,CAAuC,KAAvCiB,UAAuC,EAAAF,gBAAA,CAAlBlB,QAAA,CAAAqB,WAAW,kBAChClB,mBAAA,CAAkD,KAAlDmB,UAAkD,EAAAJ,gBAAA,CAA9BlB,QAAA,CAAAC,YAAY,CAACW,KAAK,CAACO,IAAI,iB,GAG7CV,mBAAA,8ZAUC,EACDA,mBAAA,2BAA8B,EAC9Bc,YAAA,CAAeC,sBAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}