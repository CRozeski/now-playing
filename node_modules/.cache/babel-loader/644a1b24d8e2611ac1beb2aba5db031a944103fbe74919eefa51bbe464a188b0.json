{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport MusicPlayer from './MusicPlayer.vue';\nexport default {\n  name: 'NowPlaying',\n  components: {\n    MusicPlayer\n  },\n  data() {\n    return {\n      progressMs: 0,\n      progressInterval: null,\n      pollingInterval: null,\n      pollingFrequency: 1000\n    };\n  },\n  computed: {\n    currentTrack() {\n      return this.$store.state.currentTrack;\n    },\n    isPlaying() {\n      return this.$store.state.isPlaying;\n    },\n    artistNames() {\n      if (!this.currentTrack) return '';\n      return this.currentTrack.artists.map(artist => artist.name).join(', ');\n    },\n    progressPercentage() {\n      if (!this.currentTrack) return 0;\n      return this.progressMs / this.currentTrack.duration_ms * 100;\n    }\n  },\n  methods: {\n    formatTime(ms) {\n      const seconds = Math.floor(ms / 1000 % 60);\n      const minutes = Math.floor(ms / (1000 * 60) % 60);\n      return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n    },\n    refreshTrack() {\n      this.$store.dispatch('fetchCurrentTrack');\n    },\n    startProgressTimer() {\n      if (this.progressInterval) {\n        clearInterval(this.progressInterval);\n      }\n      this.progressInterval = setInterval(() => {\n        if (this.isPlaying && this.progressMs < this.currentTrack.duration_ms) {\n          this.progressMs += 1000;\n        } else if (this.progressMs >= this.currentTrack.duration_ms) {\n          this.refreshTrack();\n        }\n      }, 1000);\n    }\n  },\n  created() {\n    this.refreshTrack();\n\n    // Poll for track updates every .5 seconds\n    this.trackInterval = setInterval(() => {\n      this.refreshTrack();\n    }, 500);\n  },\n  watch: {\n    currentTrack(newTrack) {\n      if (newTrack) {\n        // Start progress timer\n        this.progressMs = this.$store.state.progressMs || 0;\n        this.startProgressTimer();\n      }\n    },\n    isPlaying(playing) {\n      if (playing) {\n        this.startProgressTimer();\n      } else if (this.progressInterval) {\n        clearInterval(this.progressInterval);\n      }\n    }\n  },\n  beforeUnmount() {\n    if (this.progressInterval) {\n      clearInterval(this.progressInterval);\n    }\n    if (this.trackInterval) {\n      clearInterval(this.trackInterval);\n    }\n  }\n};","map":{"version":3,"names":["MusicPlayer","name","components","data","progressMs","progressInterval","pollingInterval","pollingFrequency","computed","currentTrack","$store","state","isPlaying","artistNames","artists","map","artist","join","progressPercentage","duration_ms","methods","formatTime","ms","seconds","Math","floor","minutes","refreshTrack","dispatch","startProgressTimer","clearInterval","setInterval","created","trackInterval","watch","newTrack","playing","beforeUnmount"],"sources":["C:\\Users\\menof\\OneDrive\\Desktop\\Now Playing\\now-playing\\src\\components\\NowPlaying.vue"],"sourcesContent":["// src/components/NowPlaying.vue\r\n<template>\r\n  <div class=\"now-playing-container\">\r\n    <div v-if=\"!currentTrack\" class=\"no-track\">\r\n      <p>No track currently playing</p>\r\n      <button @click=\"refreshTrack\" class=\"refresh-button\">Refresh</button>\r\n    </div>\r\n    \r\n    <div v-else class=\"track-card\">\r\n      <!-- Album Cover (Now Larger) -->\r\n      <div class=\"album-cover-container\">\r\n        <img :src=\"currentTrack.album.images[0].url\" alt=\"Album Cover\" class=\"album-cover\" />\r\n      </div>\r\n      \r\n      <!-- Track Info -->\r\n      <div class=\"track-info\">\r\n        <h2>{{ currentTrack.name }}</h2>\r\n        <p class=\"artist\">{{ artistNames }}</p>\r\n        <p class=\"album\">{{ currentTrack.album.name }}</p>\r\n      </div>\r\n      \r\n      <!-- Progress Bar \r\n      <div class=\"progress-container\">\r\n        <div class=\"progress-bar\">\r\n          <div class=\"progress\" :style=\"{ width: progressPercentage + '%' }\"></div>\r\n        </div>\r\n        <div class=\"time-info\">\r\n          <span>{{ formatTime(progressMs) }}</span>\r\n          <span>{{ formatTime(currentTrack.duration_ms) }}</span>\r\n        </div>\r\n      </div>\r\n    -->\r\n      <!-- Music Player Controls -->\r\n      <MusicPlayer />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MusicPlayer from './MusicPlayer.vue'\r\n\r\nexport default {\r\n  name: 'NowPlaying',\r\n  components: {\r\n    MusicPlayer\r\n  },\r\n  data() {\r\n    return {\r\n      progressMs: 0,\r\n      progressInterval: null,\r\n      pollingInterval: null,\r\n      pollingFrequency: 1000\r\n    }\r\n  },\r\n  computed: {\r\n    currentTrack() {\r\n      return this.$store.state.currentTrack\r\n    },\r\n    isPlaying() {\r\n      return this.$store.state.isPlaying\r\n    },\r\n    artistNames() {\r\n      if (!this.currentTrack) return ''\r\n      return this.currentTrack.artists.map(artist => artist.name).join(', ')\r\n    },\r\n    progressPercentage() {\r\n      if (!this.currentTrack) return 0\r\n      return (this.progressMs / this.currentTrack.duration_ms) * 100\r\n    }\r\n  },\r\n  methods: {\r\n    formatTime(ms) {\r\n      const seconds = Math.floor((ms / 1000) % 60)\r\n      const minutes = Math.floor((ms / (1000 * 60)) % 60)\r\n      \r\n      return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`\r\n    },\r\n    refreshTrack() {\r\n      this.$store.dispatch('fetchCurrentTrack')\r\n    },\r\n    startProgressTimer() {\r\n      if (this.progressInterval) {\r\n        clearInterval(this.progressInterval)\r\n      }\r\n      \r\n      this.progressInterval = setInterval(() => {\r\n        if (this.isPlaying && this.progressMs < this.currentTrack.duration_ms) {\r\n          this.progressMs += 1000\r\n        } else if (this.progressMs >= this.currentTrack.duration_ms) {\r\n          this.refreshTrack()\r\n        }\r\n      }, 1000)\r\n    }\r\n  },\r\n  created() {\r\n    this.refreshTrack()\r\n    \r\n    // Poll for track updates every .5 seconds\r\n    this.trackInterval = setInterval(() => {\r\n      this.refreshTrack()\r\n    }, 500)\r\n  },\r\n  watch: {\r\n    currentTrack(newTrack) {\r\n      if (newTrack) {\r\n        // Start progress timer\r\n        this.progressMs = this.$store.state.progressMs || 0;\r\n        this.startProgressTimer()\r\n      }\r\n    },\r\n    isPlaying(playing) {\r\n      if (playing) {\r\n        this.startProgressTimer()\r\n      } else if (this.progressInterval) {\r\n        clearInterval(this.progressInterval)\r\n      }\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    if (this.progressInterval) {\r\n      clearInterval(this.progressInterval)\r\n    }\r\n    \r\n    if (this.trackInterval) {\r\n      clearInterval(this.trackInterval)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.now-playing-container {\r\n  max-width: 100%;\r\n  margin: 0 auto;\r\n  padding: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n}\r\n\r\n.no-track {\r\n  text-align: center;\r\n  background-color: #24356f;\r\n  padding: 2rem;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);\r\n  margin-top: 2rem;\r\n  width: 90%;\r\n  max-width: 500px;\r\n}\r\n\r\n.refresh-button {\r\n  background-color: #1DB954;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 30px;\r\n  margin-top: 1rem;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.refresh-button:hover {\r\n  background-color: #1ed760;\r\n  transform: scale(1.05);\r\n}\r\n\r\n.track-card {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.album-cover-container {\r\n  width: 100%;\r\n  padding: 1rem;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.album-cover {\r\n  width: 100%;\r\n  max-width: 600px;\r\n  height: auto;\r\n  border-radius: 12px;\r\n  box-shadow: 8px 8px 24px rgba(118, 118, 118, 0.5);\r\n  object-fit: cover;\r\n}\r\n\r\n.track-info {\r\n  padding: 1.5rem;\r\n  text-align: center;\r\n  margin-top: 1rem;\r\n}\r\n\r\nh2 {\r\n  margin: 0;\r\n  font-size: 2rem;\r\n  color: white;\r\n  font-weight: 700;\r\n  letter-spacing: -0.02em;\r\n}\r\n\r\n.artist {\r\n  color: #b02e0c;\r\n  margin: 0.5rem 0;\r\n  font-size: 1.2rem;\r\n  font-weight: 500;\r\n}\r\n\r\n.album {\r\n  color: #aeaeae;\r\n  margin-bottom: 0.5rem;\r\n  font-weight: 400;\r\n}\r\n\r\n.progress-container {\r\n  margin: 1rem 2rem;\r\n}\r\n\r\n.progress-bar {\r\n  height: 6px;\r\n  background-color: #414141;\r\n  border-radius: 3px;\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n}\r\n\r\n.progress {\r\n  height: 100%;\r\n  background-color: #ff0000;\r\n  transition: width 0.1s linear;\r\n}\r\n\r\n.time-info {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  font-size: 0.8rem;\r\n  color: #b3b3b3;\r\n  margin-top: 0.5rem;\r\n  padding: 0 0.5rem;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}