{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"callback-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"loading\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"error-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _cache[1] || (_cache[1] = [_createElementVNode(\"div\", {\n    class: \"spinner\"\n  }, null, -1), _createElementVNode(\"p\", null, \"Connecting to Spotify...\", -1)]))) : _createCommentVNode(\"\", true), $data.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"p\", null, _toDisplayString($data.error), 1), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.returnToLogin && $options.returnToLogin(...args)),\n    class: \"retry-button\"\n  }, \"Return to Login\")])) : _createCommentVNode(\"\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","$data","loading","_hoisted_2","_cache","_createElementVNode","_createCommentVNode","error","_hoisted_3","_toDisplayString","onClick","args","$options","returnToLogin"],"sources":["C:\\Users\\menof\\OneDrive\\Desktop\\Now Playing\\now-playing\\src\\components\\CallbackPage.vue"],"sourcesContent":["// src/components/CallbackPage.vue\r\n<template>\r\n  <div class=\"callback-container\">\r\n    <div v-if=\"loading\" class=\"loading\">\r\n      <div class=\"spinner\"></div>\r\n      <p>Connecting to Spotify...</p>\r\n    </div>\r\n    <div v-if=\"error\" class=\"error-message\">\r\n      <p>{{ error }}</p>\r\n      <button @click=\"returnToLogin\" class=\"retry-button\">Return to Login</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'CallbackPage',\r\n  data() {\r\n    return {\r\n      loading: true,\r\n      error: null\r\n    }\r\n  },\r\n  created() {\r\n    this.handleCallback()\r\n  },\r\n  methods: {\r\n    async handleCallback() {\r\n      const urlParams = new URLSearchParams(window.location.search)\r\n      const code = urlParams.get('code')\r\n      const error = urlParams.get('error')\r\n      \r\n      if (error) {\r\n        this.error = `Spotify authentication error: ${error}`\r\n        this.loading = false\r\n        return\r\n      }\r\n      \r\n      if (!code) {\r\n        this.error = \"No authorization code received from Spotify\"\r\n        this.loading = false\r\n        return\r\n      }\r\n      \r\n      try {        const CLIENT_ID = window.spotifyConfig?.clientId || process.env.VUE_APP_SPOTIFY_CLIENT_ID\r\n        const CLIENT_SECRET = process.env.VUE_APP_SPOTIFY_CLIENT_SECRET\r\n        const REDIRECT_URI = window.spotifyConfig?.redirectUri || process.env.VUE_APP_REDIRECT_URI || `${window.location.origin}/callback`\r\n        \r\n        console.log(\"Using client ID:\", CLIENT_ID)\r\n        console.log(\"Using redirect URI:\", REDIRECT_URI)\r\n        // Don't log client secret\r\n        \r\n        // Create authorization string\r\n        const authString = `${CLIENT_ID}:${CLIENT_SECRET}`\r\n        const base64Auth = btoa(authString)\r\n        \r\n        const response = await fetch('https://accounts.spotify.com/api/token', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n            'Authorization': `Basic ${base64Auth}`\r\n          },\r\n          body: new URLSearchParams({\r\n            grant_type: 'authorization_code',\r\n            code,\r\n            redirect_uri: REDIRECT_URI\r\n          })\r\n        })\r\n        \r\n        const responseText = await response.text()\r\n        console.log(\"Response status:\", response.status)\r\n          if (!response.ok) {\r\n          console.error(\"Token exchange failed:\", responseText)\r\n          \r\n          // Check if this is likely a client ID or configuration issue\r\n          if (responseText.includes('invalid_client') || response.status === 401) {\r\n            this.error = `Authentication failed: Invalid client credentials. Please check the configuration.`\r\n            this.loading = false\r\n            \r\n            // Add diagnostics button\r\n            setTimeout(() => {\r\n              const errorDiv = document.querySelector('.error-message')\r\n              if (errorDiv) {\r\n                const diagButton = document.createElement('button')\r\n                diagButton.className = 'retry-button diagnostics-button'\r\n                diagButton.innerText = 'Run Diagnostics'\r\n                diagButton.addEventListener('click', () => this.$router.push('/diagnostics'))\r\n                errorDiv.appendChild(diagButton)\r\n              }\r\n            }, 100)\r\n            \r\n            return\r\n          }\r\n          \r\n          this.error = `Failed to exchange code for tokens: ${response.status} ${responseText}`\r\n          this.loading = false\r\n          return\r\n        }\r\n        \r\n        try {\r\n          const data = JSON.parse(responseText)\r\n          console.log(\"Token received successfully\")\r\n          \r\n          this.$store.commit('setToken', data.access_token)\r\n          this.$store.commit('setRefreshToken', data.refresh_token)\r\n          \r\n          this.$router.push('/')\r\n        } catch (parseError) {\r\n          console.error(\"Error parsing response:\", parseError)\r\n          this.error = \"Error parsing Spotify response\"\r\n          this.loading = false\r\n        }\r\n      } catch (error) {\r\n        console.error('Error during authentication:', error)\r\n        this.error = `Authentication error: ${error.message}`\r\n        this.loading = false\r\n      }\r\n    },\r\n    \r\n    returnToLogin() {\r\n      this.$router.push('/login')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.callback-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  background-color: #121212;\r\n  color: white;\r\n}\r\n\r\n.loading {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 4px solid rgba(255, 255, 255, 0.1);\r\n  border-radius: 50%;\r\n  border-top-color: #1DB954;\r\n  animation: spin 1s ease-in-out infinite;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n@keyframes spin {\r\n  to { transform: rotate(360deg); }\r\n}\r\n\r\n.error-message {\r\n  background-color: #282828;\r\n  padding: 2rem;\r\n  border-radius: 8px;\r\n  max-width: 500px;\r\n  text-align: center;\r\n}\r\n\r\n.retry-button {\r\n  background-color: #1DB954;\r\n  color: white;\r\n  border: none;\r\n  padding: 12px 24px;\r\n  border-radius: 30px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  margin-top: 20px;\r\n}\r\n\r\n.retry-button:hover {\r\n  background-color: #1ed760;\r\n}\r\n\r\n.diagnostics-button {\r\n  margin-top: 1rem;\r\n  background-color: #535353;\r\n}\r\n\r\n.diagnostics-button:hover {\r\n  background-color: #646464;\r\n}\r\n</style>"],"mappings":";;EAEOA,KAAK,EAAC;AAAoB;;EAFjCC,GAAA;EAGwBD,KAAK,EAAC;;;EAH9BC,GAAA;EAOsBD,KAAK,EAAC;;;uBAL1BE,mBAAA,CASM,OATNC,UASM,GAROC,KAAA,CAAAC,OAAO,I,cAAlBH,mBAAA,CAGM,OAHNI,UAGM,EAAAC,MAAA,QAAAA,MAAA,OAFJC,mBAAA,CAA2B;IAAtBR,KAAK,EAAC;EAAS,cACpBQ,mBAAA,CAA+B,WAA5B,0BAAwB,M,MALjCC,mBAAA,YAOeL,KAAA,CAAAM,KAAK,I,cAAhBR,mBAAA,CAGM,OAHNS,UAGM,GAFJH,mBAAA,CAAkB,WAAAI,gBAAA,CAAZR,KAAA,CAAAM,KAAK,OACXF,mBAAA,CAA4E;IAAnEK,OAAK,EAAAN,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;IAAEd,KAAK,EAAC;KAAe,iBAAe,E,KATzES,mBAAA,W","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}