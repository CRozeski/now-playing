{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\n/**\r\n * Authentication proxy service for Spotify API token exchange\r\n */\n\n/**\r\n * Exchanges the authorization code for access and refresh tokens\r\n * @param {string} code - The authorization code returned by Spotify\r\n * @param {string} redirectUri - The redirect URI registered with Spotify\r\n * @returns {Promise<Object>} - Promise containing access_token and refresh_token\r\n */\nexport const exchangeCodeForToken = async (code, redirectUri) => {\n  try {\n    // Get client ID from environment variables or config\n    const clientId = process.env.VUE_APP_SPOTIFY_CLIENT_ID;\n\n    // Get client secret from environment variables\n    const clientSecret = process.env.VUE_APP_SPOTIFY_CLIENT_SECRET;\n    if (!clientId || !clientSecret) {\n      throw new Error(\"Missing Spotify client credentials\");\n    }\n    console.log(\"Using client ID:\", clientId.substring(0, 5) + \"...\");\n\n    // Create authorization string for Spotify API\n    const authString = btoa(`${clientId}:${clientSecret}`);\n\n    // Make request to Spotify token endpoint\n    const response = await fetch(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Authorization\": `Basic ${authString}`\n      },\n      body: new URLSearchParams({\n        grant_type: \"authorization_code\",\n        code: code,\n        redirect_uri: redirectUri\n      })\n    });\n\n    // Parse response\n    const responseData = await response.json();\n\n    // Check for errors\n    if (!response.ok) {\n      throw new Error(responseData.error_description || responseData.error || \"Unknown error\");\n    }\n    return {\n      access_token: responseData.access_token,\n      refresh_token: responseData.refresh_token,\n      expires_in: responseData.expires_in\n    };\n  } catch (error) {\n    console.error(\"Token exchange failed:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["exchangeCodeForToken","code","redirectUri","clientId","process","env","VUE_APP_SPOTIFY_CLIENT_ID","clientSecret","VUE_APP_SPOTIFY_CLIENT_SECRET","Error","console","log","substring","authString","btoa","response","fetch","method","headers","body","URLSearchParams","grant_type","redirect_uri","responseData","json","ok","error_description","error","access_token","refresh_token","expires_in"],"sources":["C:/Users/menof/OneDrive/Desktop/Now Playing/now-playing/src/services/authProxy.js"],"sourcesContent":["/**\r\n * Authentication proxy service for Spotify API token exchange\r\n */\r\n\r\n/**\r\n * Exchanges the authorization code for access and refresh tokens\r\n * @param {string} code - The authorization code returned by Spotify\r\n * @param {string} redirectUri - The redirect URI registered with Spotify\r\n * @returns {Promise<Object>} - Promise containing access_token and refresh_token\r\n */\r\nexport const exchangeCodeForToken = async (code, redirectUri) => {\r\n  try {\r\n    // Get client ID from environment variables or config\r\n    const clientId = process.env.VUE_APP_SPOTIFY_CLIENT_ID;\r\n    \r\n    // Get client secret from environment variables\r\n    const clientSecret = process.env.VUE_APP_SPOTIFY_CLIENT_SECRET;\r\n    \r\n    if (!clientId || !clientSecret) {\r\n      throw new Error(\"Missing Spotify client credentials\");\r\n    }\r\n    \r\n    console.log(\"Using client ID:\", clientId.substring(0, 5) + \"...\");\r\n    \r\n    // Create authorization string for Spotify API\r\n    const authString = btoa(`${clientId}:${clientSecret}`);\r\n    \r\n    // Make request to Spotify token endpoint\r\n    const response = await fetch(\"https://accounts.spotify.com/api/token\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        \"Authorization\": `Basic ${authString}`\r\n      },\r\n      body: new URLSearchParams({\r\n        grant_type: \"authorization_code\",\r\n        code: code,\r\n        redirect_uri: redirectUri\r\n      })\r\n    });\r\n    \r\n    // Parse response\r\n    const responseData = await response.json();\r\n    \r\n    // Check for errors\r\n    if (!response.ok) {\r\n      throw new Error(responseData.error_description || responseData.error || \"Unknown error\");\r\n    }\r\n    \r\n    return {\r\n      access_token: responseData.access_token,\r\n      refresh_token: responseData.refresh_token,\r\n      expires_in: responseData.expires_in\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Token exchange failed:\", error);\r\n    throw error;\r\n  }\r\n};"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,oBAAoB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,WAAW,KAAK;EAC/D,IAAI;IACF;IACA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;;IAEtD;IACA,MAAMC,YAAY,GAAGH,OAAO,CAACC,GAAG,CAACG,6BAA6B;IAE9D,IAAI,CAACL,QAAQ,IAAI,CAACI,YAAY,EAAE;MAC9B,MAAM,IAAIE,KAAK,CAAC,oCAAoC,CAAC;IACvD;IAEAC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAER,QAAQ,CAACS,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;;IAEjE;IACA,MAAMC,UAAU,GAAGC,IAAI,CAAC,GAAGX,QAAQ,IAAII,YAAY,EAAE,CAAC;;IAEtD;IACA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;MACrEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,mCAAmC;QACnD,eAAe,EAAE,SAASL,UAAU;MACtC,CAAC;MACDM,IAAI,EAAE,IAAIC,eAAe,CAAC;QACxBC,UAAU,EAAE,oBAAoB;QAChCpB,IAAI,EAAEA,IAAI;QACVqB,YAAY,EAAEpB;MAChB,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,MAAMqB,YAAY,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;;IAE1C;IACA,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MAChB,MAAM,IAAIhB,KAAK,CAACc,YAAY,CAACG,iBAAiB,IAAIH,YAAY,CAACI,KAAK,IAAI,eAAe,CAAC;IAC1F;IAEA,OAAO;MACLC,YAAY,EAAEL,YAAY,CAACK,YAAY;MACvCC,aAAa,EAAEN,YAAY,CAACM,aAAa;MACzCC,UAAU,EAAEP,YAAY,CAACO;IAC3B,CAAC;EACH,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdjB,OAAO,CAACiB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}