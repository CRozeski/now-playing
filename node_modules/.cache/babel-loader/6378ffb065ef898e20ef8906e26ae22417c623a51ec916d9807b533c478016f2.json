{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"callback-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"loading\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _cache[0] || (_cache[0] = [_createElementVNode(\"p\", null, \"Connecting to Spotify...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","$data","loading","_hoisted_2","_cache","_createElementVNode","_createCommentVNode"],"sources":["C:\\Users\\menof\\OneDrive\\Desktop\\Now Playing\\now-playing\\src\\components\\CallbackPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"callback-container\">\r\n    <div v-if=\"loading\" class=\"loading\">\r\n      <p>Connecting to Spotify...</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Callback',\r\n  data() {\r\n    return {\r\n      loading: true\r\n    }\r\n  },\r\n  created() {\r\n    this.handleCallback()\r\n  },\r\n  methods: {\r\n    async handleCallback() {\r\n      const urlParams = new URLSearchParams(window.location.search)\r\n      const code = urlParams.get('code')\r\n      \r\n      if (!code) {\r\n        this.$router.push('/login')\r\n        return\r\n      }\r\n      \r\n      try {\r\n        const CLIENT_ID = process.env.VUE_APP_SPOTIFY_CLIENT_ID\r\n        const REDIRECT_URI = process.env.VUE_APP_REDIRECT_URI || `${window.location.origin}/callback`\r\n        \r\n        // In a real application, you should exchange the code for tokens on your backend\r\n        // This is just for demonstration purposes\r\n        const response = await fetch('https://accounts.spotify.com/api/token', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n          },\r\n          body: new URLSearchParams({\r\n            grant_type: 'authorization_code',\r\n            code,\r\n            redirect_uri: REDIRECT_URI,\r\n            client_id: CLIENT_ID,\r\n            client_secret: process.env.VUE_APP_SPOTIFY_CLIENT_SECRET // This should be handled server-side\r\n          })\r\n        })\r\n        \r\n        if (!response.ok) {\r\n          throw new Error('Failed to exchange code for tokens')\r\n        }\r\n        \r\n        const data = await response.json()\r\n        \r\n        this.$store.commit('setToken', data.access_token)\r\n        this.$store.commit('setRefreshToken', data.refresh_token)\r\n        \r\n        this.$router.push('/')\r\n      } catch (error) {\r\n        console.error('Error during authentication:', error)\r\n        this.$router.push('/login')\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.callback-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n}\r\n\r\n.loading {\r\n  color: #b3b3b3;\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAoB;;EADjCC,GAAA;EAEwBD,KAAK,EAAC;;;uBAD5BE,mBAAA,CAIM,OAJNC,UAIM,GAHOC,KAAA,CAAAC,OAAO,I,cAAlBH,mBAAA,CAEM,OAFNI,UAEM,EAAAC,MAAA,QAAAA,MAAA,OADJC,mBAAA,CAA+B,WAA5B,0BAAwB,oB,MAHjCC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}