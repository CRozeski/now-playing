{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'Callback',\n  data() {\n    return {\n      loading: true\n    };\n  },\n  created() {\n    this.handleCallback();\n  },\n  methods: {\n    async handleCallback() {\n      const urlParams = new URLSearchParams(window.location.search);\n      const code = urlParams.get('code');\n      if (!code) {\n        this.$router.push('/login');\n        return;\n      }\n      try {\n        const CLIENT_ID = process.env.VUE_APP_SPOTIFY_CLIENT_ID;\n        const REDIRECT_URI = process.env.VUE_APP_REDIRECT_URI || `${window.location.origin}/callback`;\n\n        // In a real application, you should exchange the code for tokens on your backend\n        // This is just for demonstration purposes\n        const response = await fetch('https://accounts.spotify.com/api/token', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          body: new URLSearchParams({\n            grant_type: 'authorization_code',\n            code,\n            redirect_uri: REDIRECT_URI,\n            client_id: CLIENT_ID,\n            client_secret: process.env.VUE_APP_SPOTIFY_CLIENT_SECRET // This should be handled server-side\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Failed to exchange code for tokens');\n        }\n        const data = await response.json();\n        this.$store.commit('setToken', data.access_token);\n        this.$store.commit('setRefreshToken', data.refresh_token);\n        this.$router.push('/');\n      } catch (error) {\n        console.error('Error during authentication:', error);\n        this.$router.push('/login');\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","loading","created","handleCallback","methods","urlParams","URLSearchParams","window","location","search","code","get","$router","push","CLIENT_ID","process","env","VUE_APP_SPOTIFY_CLIENT_ID","REDIRECT_URI","VUE_APP_REDIRECT_URI","origin","response","fetch","method","headers","body","grant_type","redirect_uri","client_id","client_secret","VUE_APP_SPOTIFY_CLIENT_SECRET","ok","Error","json","$store","commit","access_token","refresh_token","error","console"],"sources":["C:\\Users\\menof\\OneDrive\\Desktop\\Now Playing\\now-playing\\src\\components\\Callback.vue"],"sourcesContent":["<template>\r\n  <div class=\"callback-container\">\r\n    <div v-if=\"loading\" class=\"loading\">\r\n      <p>Connecting to Spotify...</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Callback',\r\n  data() {\r\n    return {\r\n      loading: true\r\n    }\r\n  },\r\n  created() {\r\n    this.handleCallback()\r\n  },\r\n  methods: {\r\n    async handleCallback() {\r\n      const urlParams = new URLSearchParams(window.location.search)\r\n      const code = urlParams.get('code')\r\n      \r\n      if (!code) {\r\n        this.$router.push('/login')\r\n        return\r\n      }\r\n      \r\n      try {\r\n        const CLIENT_ID = process.env.VUE_APP_SPOTIFY_CLIENT_ID\r\n        const REDIRECT_URI = process.env.VUE_APP_REDIRECT_URI || `${window.location.origin}/callback`\r\n        \r\n        // In a real application, you should exchange the code for tokens on your backend\r\n        // This is just for demonstration purposes\r\n        const response = await fetch('https://accounts.spotify.com/api/token', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n          },\r\n          body: new URLSearchParams({\r\n            grant_type: 'authorization_code',\r\n            code,\r\n            redirect_uri: REDIRECT_URI,\r\n            client_id: CLIENT_ID,\r\n            client_secret: process.env.VUE_APP_SPOTIFY_CLIENT_SECRET // This should be handled server-side\r\n          })\r\n        })\r\n        \r\n        if (!response.ok) {\r\n          throw new Error('Failed to exchange code for tokens')\r\n        }\r\n        \r\n        const data = await response.json()\r\n        \r\n        this.$store.commit('setToken', data.access_token)\r\n        this.$store.commit('setRefreshToken', data.refresh_token)\r\n        \r\n        this.$router.push('/')\r\n      } catch (error) {\r\n        console.error('Error during authentication:', error)\r\n        this.$router.push('/login')\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.callback-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n}\r\n\r\n.loading {\r\n  color: #b3b3b3;\r\n}\r\n</style>"],"mappings":";AASA,eAAe;EACbA,IAAI,EAAE,UAAU;EAChBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,cAAc,CAAC;EACtB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,cAAcA,CAAA,EAAG;MACrB,MAAME,SAAQ,GAAI,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM;MAC5D,MAAMC,IAAG,GAAIL,SAAS,CAACM,GAAG,CAAC,MAAM;MAEjC,IAAI,CAACD,IAAI,EAAE;QACT,IAAI,CAACE,OAAO,CAACC,IAAI,CAAC,QAAQ;QAC1B;MACF;MAEA,IAAI;QACF,MAAMC,SAAQ,GAAIC,OAAO,CAACC,GAAG,CAACC,yBAAwB;QACtD,MAAMC,YAAW,GAAIH,OAAO,CAACC,GAAG,CAACG,oBAAmB,IAAK,GAAGZ,MAAM,CAACC,QAAQ,CAACY,MAAM,WAAU;;QAE5F;QACA;QACA,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,wCAAwC,EAAE;UACrEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAE,IAAInB,eAAe,CAAC;YACxBoB,UAAU,EAAE,oBAAoB;YAChChB,IAAI;YACJiB,YAAY,EAAET,YAAY;YAC1BU,SAAS,EAAEd,SAAS;YACpBe,aAAa,EAAEd,OAAO,CAACC,GAAG,CAACc,6BAA4B,CAAE;UAC3D,CAAC;QACH,CAAC;QAED,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,oCAAoC;QACtD;QAEA,MAAMhC,IAAG,GAAI,MAAMqB,QAAQ,CAACY,IAAI,CAAC;QAEjC,IAAI,CAACC,MAAM,CAACC,MAAM,CAAC,UAAU,EAAEnC,IAAI,CAACoC,YAAY;QAChD,IAAI,CAACF,MAAM,CAACC,MAAM,CAAC,iBAAiB,EAAEnC,IAAI,CAACqC,aAAa;QAExD,IAAI,CAACzB,OAAO,CAACC,IAAI,CAAC,GAAG;MACvB,EAAE,OAAOyB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK;QACnD,IAAI,CAAC1B,OAAO,CAACC,IAAI,CAAC,QAAQ;MAC5B,UAAU;QACR,IAAI,CAACZ,OAAM,GAAI,KAAI;MACrB;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}